if(isOpen("Salience")) close("Salience");
Input=getTitle();
wi=getWidth();
hi=getHeight();
setBatchMode(true);


//SETUP
//--------------------------------------------------------------------------------------------------------
img=getTitle();
useEnhance=0;
useReal=0;
useGab=1;
useCon=0;
useScale=0;
useSob=0;
nAngles=4;
featureM="Square"; //Abs //Square //SquareRoot

useAvg=0;

useMic=1;
MicMin = 5;
MicMod = 20;

angles=newArray("NaN");
if(useGab){
angles=newArray(nAngles);
for(i=0;i<nAngles;i++){
angles[i]=180/nAngles*i;
}
}




selectImage(Input);

if(useSob){
run("Duplicate...", "title=Sob");
//run("Gaussian Blur...", "sigma=2");
run("Duplicate...", "title=tmp");
run("Convolve...", "text1=[1 0 -1\n2 0 -2\n1 0 -1\n]");
run("Abs","slice");
 run("Copy"); setPasteMode("Add");
close();
run("Convolve...", "text1=[1 2 1\n0 0 0\n-1 -2 -1\n]");
run("Abs","slice");
run("Paste");
Input="Sob";
}





img=getTitle();

for(A=0;A<angles.length;A++){

    theta=angles[A];
    sigma = 7/3;
    lambda = PI;
    psi = 0;
    gamma = 1;
    size = 10;


function runGaborKernel(sigma, theta, lambda, psi, gamma, size) {

// Convert angle to radians
    theta = theta * PI / 180.0;
    
    // Gabor filter parameters
    table = newArray();

for (y = -size; y <= size; y++) {
row=newArray(size*2);
        for (x = -size; x <= size; x++) {
            x_theta = x * cos(theta) + y * sin(theta);
            y_theta = -x * sin(theta) + y * cos(theta);
            value = exp(-0.5 * (x_theta * x_theta + gamma * gamma * y_theta * y_theta) / (sigma * sigma)) * cos(2 * PI * x_theta / lambda + psi);
	row[x+size]=value;
      
    }

  table[y+size]=String.join(row,"   ");
}
table=String.join(table,"\n");

run("Convolve...", "text1=["+table+"]");

}

// STEP 1 
// Create Image Scales
//-------------------------------------------------------------------------------------------------------
Scales=8;

for(s=0;s<=Scales;s++){
T="S"+s;
if(isOpen(T)) close(T);
}

for(s=0;s<=5;s++){
for(d=3;d<=4;d++){

C="S"+s;
D="S"+s+d;
T=C+"-"+D;
if(isOpen(T)) close(T);
}}




for(s=0;s<=Scales;s++){
selectImage(Input);

T="S"+s;
sc = 1/pow(2,s);

selectImage(Input);
run("Duplicate...", "title=&T");





w=wi*sc;
h=hi*sc;

if(w<2) w=1;
if(h<2) h=1;

run("Size...", "width=&w height=&h depth=1 average interpolation=Bilinear"); // Original code uses Bilinear I prefer Bilinear

}


// STEP 2
// Create Feature Maps
//-------------------------------------------------------------------------------------------------------


FeatureNames = newArray();
for(s=0;s<=5;s++){
for(d=2;d<=3;d++){

C="S"+s;
D="S"+s+d;
M="S"+s+3;
selectImage(C);

T=C+"-"+D;
run("Duplicate...", "title=&T");
selectImage(D); 
run("Duplicate...", "title=temp");
sc = 1/pow(2,s);
w=wi*sc;
h=hi*sc;
run("Size...", "width=&w height=&h depth=1 average interpolation=Bilinear"); // Original code uses Bilinear I prefer Bilinear
run("Copy"); setPasteMode("Subtract");
close();
selectImage(T); run("Paste");


if(useMic){
selectImage(M);
run("Duplicate...", "title=temp");
run("Size...", "width=&w height=&h depth=1 average interpolation=Bilinear"); // Original code uses Bilinear I prefer Bilinear
run("Abs");
mx=getValue("Max");
v=1+mx/(MicMin+pow((s+d)/8,2)*MicMod);
run("Add...","value=v");
run("Copy"); setPasteMode("Divide");
close();
selectImage(T); run("Paste");
}


if(useGab){
run("Duplicate...", "title=tmp");
psi=0;
runGaborKernel(sigma, theta, lambda, psi, gamma, size);
 run("Copy"); setPasteMode("Add");
close();
psi=0+PI/2;
if(useGab)  runGaborKernel(sigma, theta, lambda, psi, gamma, size);
run("Paste");
}


run("Abs");  
if(featureM=="Square") run("Square");
if(featureM=="SquareRoot"){ run("Abs");  run("Square Root"); }


FeatureNames=Array.concat(FeatureNames,T);

if(!useReal) run("Enhance Contrast...", "saturated=0.35 normalize");
run("Enhance Contrast...", "saturated=0.35"); 
}}


//Array.show(FeatureNames);

if(!useGab && useEnhance){
for(i=0;i<FeatureNames.length-1;i++){
selectImage(FeatureNames[i]); 
w=getWidth();
h=getHeight();

selectImage(FeatureNames[FeatureNames.length-1]); 
run("Duplicate...", "title=temp");
run("Size...", "width=&w height=&h depth=1 average interpolation=Bilinear");
run("Copy"); setPasteMode("Subtract");
selectImage(FeatureNames[i]); 
run("Paste");
run("Min...","value=0");
}}




// STEP 3
// Max Normalise Features
//-------------------------------------------------------------------------------------------------------
/*
%    Normalize data by multiplying it with 
%    (max(data) - avg(localMaxima))^2 as described in;
%    L. Itti, C. Koch, E. Niebur, A Model of Saliency-Based 
%    Visual Attention for Rapid Scene Analysis, IEEE PAMI, 
%    Vol. 20, No. 11, pp. 1254-1259, Nov 1998.
%
*/

for(i=0;i<FeatureNames.length;i++){
selectImage(FeatureNames[i]); 


//Normalise
M=10;
//run("Gaussian Blur...", "sigma=0.5");


//Iterative Convolve Test

if(useCon){
G=newArray(0,2);

for(x=0;x<G.length-1;x++){
run("Add Slice");
setSlice(1);
run("Copy");  setPasteMode("Copy");
setSlice(x+2);
run("Paste");
g=G[x];
run("Gaussian Blur...", "sigma=&g"); 
run("Copy"); 
g=G[x+1];
run("Gaussian Blur...", "sigma=&g"); 

setPasteMode("Difference"); run("Paste");
run("Multiply...","value=-1");
setPasteMode("Add");
run("Paste");
run("Min...","value=0");
//
}
setSlice(1); run("Delete Slice");
setPasteMode("Add");

for(x=0;x<G.length-2;x++){
run("Copy"); run("Delete Slice");
run("Paste");
}

}

mx=getValue("Max");
//print(mx);
run("Enhance Contrast...", "saturated=0.35 normalize");

run("Multiply...","value=M");

Th=M/10; //Threshold
setThreshold(Th,M);

if(!useAvg){
run("Create Selection");
getStatistics(lm_num,lm_avg); //lm_num = number of max, //lm_avg= mean of maxima
run("Select None");
if (lm_num > 1){
	str="code=v*"+pow(M-lm_avg,2);
            run("Macro...", str);
}else{ 
if (lm_num == 1){
	str="code=v*"+pow(M-lm_avg,2);
            run("Macro...", str);
}
}
}else{
mn=getValue("Mean")*1.15;
run("Subtract...","value=mn");
run("Abs");

}

run("Enhance Contrast...", "saturated=0.35 normalize");

if(useReal){
run("Enhance Contrast...", "saturated=0.35 normalize");
run("Multiply...","value=mx");
}
//setBatchMode("show");
}



// STEP 4
// Average Maps
//-------------------------------------------------------------------------------------------------------

sm =0;
w2=wi;
h2=hi;
for(i=0;i<FeatureNames.length;i++){
selectImage(FeatureNames[i]);
run("Size...", "width=&w2 height=&h2 depth=1 average interpolation=Bilinear"); // Original code uses Bilinear I prefer Bilinear
v=1;
if(useScale)v=1/(1+i);
run("Multiply...","value=v");
sm+=v;

}



for(i=0;i<FeatureNames.length-1;i++){
selectImage(FeatureNames[i]); run("Copy"); setPasteMode("Add"); close();
selectImage(FeatureNames[i+1]); run("Paste");
}


run("Divide...","value=&sm");
run("Enhance Contrast...", "saturated=0.35");
run("Gem");


nm=Input+"_Salience";
if(useGab) nm=nm+"_Gab_"+theta;
rename(nm);
}//Angles

if(useGab){

setPasteMode("Add");
for(A=0;A<angles.length-1;A++){
theta=angles[A];
nm=Input+"_Salience";
nm=nm+"_Gab_"+theta;
selectImage(nm); run("Copy"); close();
theta=angles[A+1];
nm=Input+"_Salience";
nm=nm+"_Gab_"+theta;
selectImage(nm); run("Paste");
}
run("Divide...","value=4");
run("Enhance Contrast...", "saturated=0.35");
nm=Input+"_Salience";
rename(nm);
}
if(!useReal) run("Enhance Contrast...", "saturated=0.35 normalize");
//setBatchMode("show");

