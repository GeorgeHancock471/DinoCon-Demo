/*____________________________________________________________________

	Title: Generate Targets
	Authors:  Jolyon Troscianko and George Hancock 
	Date: 27/01/2021
	
.................................................................................................................

Description:
''''''''''''''''''''''''''''''''
Generates the Animal pattern target phenotype. The pattern generation system was coded by Jolyon Troscianko. The target shape and gene string code was made by George Hancock.

*/


setBatchMode(true);




// TestPoint
//---------------------------------------------------
// Allows you to obtain the index of a Value within an Array.

function TestPoint(Title) {
Dialog.createNonBlocking("TestPoint");
Dialog.createNonBlocking("Did " + Title + " work?");
Dialog.show();

}



// Index
//---------------------------------------------------
// Allows you to obtain the index of a Value within an Array.

  function index(a, value) {
      for (i=0; i<a.length; i++)
          if (a[i]==value) return i;
      return -1;
  }


function TestPoint(num) {
Dialog.createNonBlocking(num);
Dialog.show();
}


PopLocal = getDirectory("plugins") + "2 CamoReq/PopLocation.txt";
PopLocation = File.openAsString(PopLocal);
PopLocation=split(PopLocation, "\n");
PopLocation = PopLocation[0];
PopLocation = PopLocation;

PopulationSet = PopLocation+"Settings_Population.txt";
PopulationSettings = File.openAsString(PopulationSet );
PopulationSettings = split(PopulationSettings, "\n");





ColourSpace = split(PopulationSettings[6], "\t");

lMinR = parseFloat(ColourSpace[1]);
lMaxR =  parseFloat(ColourSpace[2]);

aMinR =  parseFloat(ColourSpace[3]);
aMaxR =  parseFloat(ColourSpace[4]);

bMinR =  parseFloat(ColourSpace[5]);
bMaxR =  parseFloat(ColourSpace[6]);


TargetSet = split(PopulationSettings[0],"\t");
TargetSetting = TargetSet[1];


TargetChoice = TargetSetting;

TargetDirectory = getDirectory("plugins")+ "1 CamoEvo/Targets/";

TargetSettings = File.openAsString(TargetDirectory+"Target_Settings.txt");

TargetSettingsRows = split(TargetSettings, "\n");



for(i=0; i<TargetSettingsRows.length; i++){
temp = TargetSettingsRows[i];

if(startsWith(temp, TargetChoice)){
TargetSetting = temp;
}

}

TargetChoiceSettings = split(TargetSetting, "\t");


TargetChoiceShape = TargetChoiceSettings[1];

TargetChoiceCentre = parseFloat(TargetChoiceSettings[4]);

TargetChoiceShader = parseFloat(TargetChoiceSettings[7]);
TargetChoiceDetail = parseFloat(TargetChoiceSettings[8]);
TargetChoicePattern = TargetChoiceSettings[9];






PatternTemplate = getDirectory("plugins") + "2 CamoReq/PatternTemplate.txt";

GenesString=File.openAsString(PatternTemplate);	// open txt data file
GenesRows=split(GenesString, "\n");








Var0 = 	newArray();
Var1 =  newArray();
Var2 =  newArray();
Var3 =  newArray();
Var4 =  newArray();
Var5 =  newArray();
Var6 =  newArray();
Var7 =  newArray();
Var8 =	newArray();
Var9 = 	newArray();
Var10 = newArray();
Var11 = newArray();
Var12 = newArray();
Var13 = newArray();
Var14 = newArray();
Var15 = newArray();
Var16 = newArray();
Var17 = newArray();
Var18 = newArray();
Var19 = newArray();
Var20 = newArray();
Var21 = newArray();
Var22 = newArray();
Var23 = newArray();
Var24 = newArray();
Var25 = newArray();
Var26 = newArray();
Var27 = newArray();
Var28 = newArray();
Var29 = newArray();
Var30 = newArray();
Var31 = newArray();
Var32 = newArray();
Var33 = newArray();
Var34 = newArray();
Var35 = newArray();
Var34 = newArray();
Var35 = newArray();
Var36 = newArray();
Var37 = newArray();
Var38 = newArray();
Var39 = newArray();
Var40 = newArray();
Var41 = newArray();
Var42 = newArray();
Var43 = newArray();
Var44 = newArray();
Var45 = newArray();
Var46 = newArray();
Var47 = newArray();
Var48 = newArray();
Var49 = newArray();
Var50 = newArray();
Var51 = newArray();


Temp = split(GenesRows[0],"\t");

//Modify Phenotype Ranges
//=============================================================
phenoRangeDIR = PopLocation+"Transform_PhenotypeRanges.txt";

if(File.exists(phenoRangeDIR)){


phenoRangeSTR = File.openAsString(phenoRangeDIR );
phenoRangeARR = split(phenoRangeSTR,"\n");
phenoRangeMIN =  split(phenoRangeARR[1],"\t");
phenoRangeMAX =  split(phenoRangeARR[2],"\t");

	for(i=1;i<GenesRows.length;i++){
	
	tArr = split(GenesRows[i],"\t");

	for(j=4;j<Temp.length;j++){
	
	tV = parseFloat(tArr[j]);
	
	tMx =  parseFloat(phenoRangeMAX[j]);
	tMn =  parseFloat(phenoRangeMIN[j]);
	
	tArr[j] = tV *(tMx-tMn) + tMn;
	
	if(isNaN(tArr[j])) TestPoint("Error NaN");

	}
	
	GenesRows[i] = String.join(tArr,"\t");
	
	}
	
}
//=============================================================

v0=index(Temp, "ID");
v1=index(Temp, "ptn_dim_xcp");
v2=index(Temp, "ptn_dim_ycp");
v3=index(Temp, "ptn_dim_wdt");
v4=index(Temp, "ptn_dim_asr");
v5=index(Temp, "ptn_dim_agl");
v6=index(Temp, "ptn_grd_cvr");
v7=index(Temp, "ptn_grd_sig");
v8=index(Temp, "ptn_grd_hgt");
v9=index(Temp, "ptn_grd_agl");


v10=index(Temp, "eem_int_lvl");
v11=index(Temp, "eem_int_rto");

v12=index(Temp, "eem_sig_lvl");
v13=index(Temp, "eem_sig_rto");

v14=index(Temp, "eem_exp_lvl");
v15=index(Temp, "eem_exp_rto");

v38=index(Temp, "eem_sft_hrz");
v39=index(Temp, "eem_sft_vrt");


v16=index(Temp, "col_mac_lmv");
v17=index(Temp, "col_mac_rgv");
v18=index(Temp, "col_mac_byv");


v22=index(Temp, "col_bot_lmv");
v23=index(Temp, "col_bot_rgv");
v24=index(Temp, "col_bot_byv");;

v25=index(Temp, "col_grd_sig");
v26=index(Temp, "col_grd_hgt");

v27=index(Temp, "spk_one_lvl");
v28=index(Temp, "spk_one_spc");
v29=index(Temp, "spk_one_sig");
v30=index(Temp, "spk_one_ycp");

v31=index(Temp, "spk_two_lvl");
v32=index(Temp, "spk_two_spc");
v33=index(Temp, "spk_two_sig");
v34=index(Temp, "spk_two_ycp");

v35=index(Temp, "ptn_bil_ctr");
v36=index(Temp, "ptn_bil_sft");
v37=index(Temp, "ptn_bil_frq");





for(i=1; i<GenesRows.length; i++){
Temp = split(GenesRows[i],"\t");

Var0 = Array.concat(Var0,Temp[v0]);
Var1 = Array.concat(Var1,Temp[v1]);
Var2 = Array.concat(Var2,Temp[v2]);
Var3 = Array.concat(Var3,Temp[v3]);
Var4 = Array.concat(Var4,Temp[v4]);
Var5 = Array.concat(Var5,Temp[v5]);
Var6 = Array.concat(Var6,Temp[v6]);
Var7 = Array.concat(Var7,Temp[v7]);
Var8 = Array.concat(Var8,Temp[v8]);
Var9 = Array.concat(Var9,Temp[v9]);
Var10 = Array.concat(Var10,Temp[v10]);
Var11 = Array.concat(Var11,Temp[v11]);
Var12 = Array.concat(Var12,Temp[v12]);
Var13 = Array.concat(Var13,Temp[v13]);
Var14 = Array.concat(Var14,Temp[v14]);
Var15 = Array.concat(Var15,Temp[v15]);
Var16 = Array.concat(Var16,Temp[v16]);
Var17 = Array.concat(Var17,Temp[v17]);
Var18 = Array.concat(Var18,Temp[v18]);

Var22 = Array.concat(Var22,Temp[v22]);
Var23 = Array.concat(Var23,Temp[v23]);
Var24 = Array.concat(Var24,Temp[v24]);
Var25 = Array.concat(Var25,Temp[v25]);
Var26 = Array.concat(Var26,Temp[v26]);
Var27 = Array.concat(Var27,Temp[v27]);
Var28 = Array.concat(Var28,Temp[v28]);
Var29 = Array.concat(Var29,Temp[v29]);
Var30 = Array.concat(Var30,Temp[v30]);
Var31 = Array.concat(Var31,Temp[v31]);
Var32 = Array.concat(Var32,Temp[v32]);
Var33 = Array.concat(Var33,Temp[v33]);
Var34 = Array.concat(Var34,Temp[v34]);
Var35 = Array.concat(Var35,Temp[v35]);
Var36 = Array.concat(Var36,Temp[v36]);
Var37 = Array.concat(Var37,Temp[v37]);
Var38 = Array.concat(Var36,Temp[v38]);
Var39 = Array.concat(Var37,Temp[v39]);
}



for(j = 0; j<GenesRows.length-1; j++){
setBatchMode(true);



while(roiManager("count") > 0){
	roiManager("select", 0);
	roiManager("Delete");
}



if(!isOpen("Target")){
TargetPath = getDirectory("plugins") + "1 CamoEvo/Targets/" + TargetChoiceShape +"/Target.png";
open(TargetPath);
rename("Target");

}






if(!isOpen("Shader") && TargetChoiceShader>0){
if(File.exists(getDirectory("plugins") + "1 CamoEvo/Targets/" + TargetChoiceShape +"/Shader.png")){
open (getDirectory("plugins") + "1 CamoEvo/Targets/" + TargetChoiceShape +"/Shader.png");


rename("Shader");

	run("Multiply...", "value=&TargetChoiceShader");
	AddV=127*(1-TargetChoiceShader);
	run("Add...", "value=&AddV");

	run("RGB Stack");
	run("32-bit");
	divVal = 127;
	run("Divide...", "value=&divVal  stack");
	

}
}



if(!isOpen("Gloss")){
if(File.exists(getDirectory("plugins") + "1 CamoEvo/Targets/" + TargetChoiceShape +"/Gloss.png")){
open (getDirectory("plugins") + "1 CamoEvo/Targets/" + TargetChoiceShape +"/Gloss.png");
rename("Gloss");
}
}



if(!isOpen("Outline")){
if(File.exists(getDirectory("plugins") + "1 CamoEvo/Targets/" + TargetChoiceShape +"/Outline.png")){
open (getDirectory("plugins") + "1 CamoEvo/Targets/" + TargetChoiceShape +"/Outline.png");
rename("Outline");
}

}




if(!isOpen("Detail")&& TargetChoiceDetail>0){
if(File.exists(getDirectory("plugins") + "1 CamoEvo/Targets/" + TargetChoiceShape +"/Detail.png")){
open (getDirectory("plugins") + "1 CamoEvo/Targets/" + TargetChoiceShape +"/Detail.png");
rename("Detail");
run("RGB Stack");
}
}


if(!isOpen("Detail_Alpha")&& TargetChoiceDetail>0){
if(File.exists(getDirectory("plugins") + "1 CamoEvo/Targets/" + TargetChoiceShape +"/Detail_Alpha.png")){
open (getDirectory("plugins") + "1 CamoEvo/Targets/" + TargetChoiceShape +"/Detail_ALpha.png");
rename("Detail_Alpha");

run("Multiply...", "value=&TargetChoiceDetail");

run("32-bit");
run("Divide...","value=255");
run("Copy");
setPasteMode("Muliply");
selectImage("Detail");
setSlice(1);
run("Paste");
setSlice(2);
run("Paste");
setSlice(3);
run("Paste");

selectImage("Detail_Alpha");
run("Multiply...","value=255");
run("Invert");
run("Divide...","value=255");
}
}


selectImage("Target");
run("8-bit");
setAutoThreshold("Default dark");
setOption("BlackBackground", true);
run("Convert to Mask");

run("Create Selection");
roiManager("Add");

Roi.getBounds(targetX, targetY, targetWidth, targetHeight);


if(j>0) run("Select None");

canvasW = 400;

if(targetHeight<targetWidth) topY = -targetHeight/15; // y coordinate of the top of the image
if(targetWidth<=targetHeight) topY = -targetWidth/15; // y coordinate of the top of the image


lMin = lMinR;
lMax = lMaxR;
aMin = aMinR;
aMax = aMaxR; 
bMin = bMinR;
bMax = bMaxR;


// ---------------------- Obtain Variables ---------------------------
//====================================================================



// ------------------- Pattern Variables-------------------
patX = parseFloat(Var1[j]); // x (specified pattern x coord)
patY = parseFloat(Var2[j]);  // y (specified pattern y coord)
patW = parseFloat(Var3[j]);  // scale of the pattern
patH = parseFloat(Var4[j]);  // aspect ratio of pattern (stretches pattern, turns spots to stripes)
patR = parseFloat(Var5[j]);  // pattern rotation
patT = parseFloat(Var6[j]);  // pattern threshold (percentage of image covered by pattern)

csS = parseFloat(Var7[j]);  // countershading sigma (i.e. level of blurring)
csH = parseFloat(Var8[j]); // countershading height/radius 
csR = parseFloat(Var9[j]);  // countershading pattern rotation angle


//Symmetry
bnX =  parseFloat(Var35[j]); //Location
bnY =  parseFloat(Var36[j]); //Amplitude
bnF =  parseFloat(Var37[j]); //Frequency



// ------------------- Colour Variables-------------------

pcL = parseFloat(Var16[j]);  // pattern colour
pcA = parseFloat(Var17[j]); 
pcB = parseFloat(Var18[j]); 


bcL = parseFloat(Var22[j]);  // bottom colour
bcA = parseFloat(Var23[j]); 
bcB = parseFloat(Var24[j]); 

tcS = parseFloat(Var25[j]); // top colour sigma (i.e. level of blurring)
tcH = parseFloat(Var26[j]);  // top colour height/radius 


//	Edge Enhancement Genes
// --------------------------------------
ee_I = parseFloat(Var10[j]);  // maximum offset of enhanced edge
ee_IR = parseFloat(Var11[j]);  // ratio between dark and light offset
ee_S = parseFloat(Var12[j]);  // maximum smoothness of enhanced edge
ee_SR = parseFloat(Var13[j]);  // ratio between dark and light smoothess
ee_E = parseFloat(Var14[j]);  // maximum expansion of enhanced edge
ee_ER = parseFloat(Var15[j]);  // ratio between dark and light expansion
ee_V = parseFloat(Var38[j]);  // maximum expansion of enhanced edge
ee_H = parseFloat(Var39[j]);  // ratio between dark and light expansion


//	Speckling Genes
// --------------------------------------


//Speckle1
noiL1 = parseFloat(Var27[j]);  // level of speckling noise (SDs around 1) Dark
noiSP1 = parseFloat(Var28[j]); // level of speckling noise (SDs around 1) Light
noiS1 = parseFloat(Var29[j]); // speckling noise sigma
noiP1 = parseFloat(Var30[j]); // speckling noise position


//Speckle2

noiL2 = parseFloat(Var31[j]);  // level of speckling noise (SDs around 1) Dark
noiSP2 = parseFloat(Var32[j]); // level of speckling noise (SDs around 1) Light
noiS2 = parseFloat(Var33[j]); // speckling noise sigma
noiP2 = parseFloat(Var34[j]); // speckling noise position


// --------------------- Transform Variables -------------------------
//====================================================================

	centremod =  TargetChoiceCentre - canvasW/2;
	centremod = centremod*-1;


//	Pattern Genes
// --------------------------------------

//Coordinates

patW = Math.pow(patW,0.25);
patW2= patW;

patWmax = 1000;
patWmin = 15;
patW = patW*(patWmax-patWmin) + patWmin;

patHmax = patW;
patHmin = 2;
patH = pow(patH,3)*(patHmax-patHmin) + patHmin;

patXmax = 2980-patW;
patXmin = 20;


epValue = 8;

patX = patX-0.5;
patX = 1/(1+Math.exp(-epValue*patX));

patX = patX*(patXmax-patXmin) + patXmin;



patYmax = 2980-patH;
patYmin = 20;

patY = patY-0.5;
patY = 1/(1+Math.exp(-epValue*patY));

patY = patY *(patYmax-patYmin) + patYmin;


patO = patR;

patR = 45*floor(patO*3.999); //transform to angle (degrees)




csSmax = canvasW*1.5;
csSmin = 1;
csS = csS*(csSmax-csSmin) + csSmin;


csH2 = csH;
csHmax = canvasW/2; 
csHmin = topY;
csH = csH*(csHmax-csHmin) + csHmin;



csR = 360*patO; //transform to angle (degrees)


//	Colouration Genes
// --------------------------------------

tpL = random()*(lMax-lMin) + lMin;
tpA = random()*(aMax-aMin) + aMin;
tpB = random()*(bMax-bMin) + bMin;


pcL = pcL*(lMax-lMin) + lMin;
pcA = pcA*(aMax-aMin) + aMin;
pcB = pcB*(bMax-bMin) + bMin;


bcL = bcL*(lMax-lMin) + lMin;
bcA = bcA*(aMax-aMin) + aMin;
bcB = bcB*(bMax-bMin) + bMin;


tc1S = tcS;
tc1H = tcH;

tc2S = random();
tc2H = random();

tcSmax = canvasW/2;
tcSmin = 1;
tc1S = 0.8*tc1S*(tcSmax-tcSmin) + tcSmin;
tc2S = 0.8*tc2S*(tcSmax-tcSmin) + tcSmin;


tcHmax = canvasW-topY; 
tcHmin = topY;

tc1H = 2.3*tc1H*(tcHmax-tcHmin) + tcHmin;
tc2H = 2.3*tc2H*(tcHmax-tcHmin) + tcHmin;

tc1H2 =(tc1H);
tc2H2 = (tc2H);

//	Speckling Genes 
// --------------------------------------

noiSmax = canvasW/10; // noise sigma
noiSmin = 0.5;

noiLmax = 0.30; // noise intensity (SDs from mean, where mean=1)
noiLmin = 0;

noiPmin=50;
noiPmax=1000-canvasW-noiPmin;


//Speckle 1

noiL1 = pow(noiL1,1.5)*0.3;


//Speckle 2

noiL2 = pow(noiL2,1.5)*0.3;



//Symetry
//.............

bnYmax = 11;
bnYV = bnY*bnYmax;

noiF = bnF*3;

bnFmax =4.5;
bnFV = Math.floor(bnF*bnFmax);

bnDirArray = newArray(1,-1,1,-1,1,1,-1,1,-1,1,-1,1);






// --------------------- Pattern generation --------------------------


//run("Reaction Diffusion Pattern Generator", "f=&patF k=0.07700 da=0.20000 db=0.10000 noise=&patN max=10000 w=&patW h=&patH");

	PatternSheet = getDirectory("plugins") + "2 CamoReq//Patterns/pattern3001.png";

if(!isOpen("patternSheet")){
open(PatternSheet);
//setBatchMode("Show");


rename("patternSheet");
}

selectImage("patternSheet");

makeRectangle(patX, patY, patW, patH);




run("Duplicate...", "title=[base pattern]");
run("32-bit");




scaleVal = canvasW+100;
run("Scale...", "x=- y=- width=&scaleVal height=&scaleVal interpolation=Bilinear average create title=pattern");
run("Rotate... ", "angle=&patR grid=1 interpolation=Bilinear");
makeRectangle(50, 50, canvasW, canvasW);
run("Crop");









sigVal = (1-patW2)*8;

run("Gaussian Blur...", "sigma=&sigVal");







	//	Symmetry
	// --------------------------------------


	//Bilateral
	if( TargetChoicePattern == "yes"){


	TITLE=getTitle();


	centremod =  TargetChoiceCentre - canvasW/2;
	centremod = centremod*-1;

	makeRectangle(0, 0,  (canvasW/2) - centremod, canvasW );


	run("Duplicate...", "title=mirror");
	selectImage("mirror");
	run("Select All");
	run("Flip Horizontally", "slice");



	makeRectangle(0, 0,  (canvasW/2) - centremod, canvasW );


	run("Copy");
	setPasteMode("Copy");
	close("mirror");

	selectImage(TITLE);

	makeRectangle((canvasW/2)-centremod, 0, (canvasW/2) - centremod, canvasW );

	run("Paste");


	run("Select All");
	run("Gaussian Blur...", "sigma=1");

	}
	

	
	

	


	//	Asymmetry
	// --------------------------------------
	dN =0;

	if( TargetChoicePattern == "yes"){

	for(i=0; i< bnFV; i++){

		width =canvasW/10 + (random*canvasW/10);
		rX = canvasW/10*random()*bnFV;


		xC =  ( ((canvasW/2)-width-rX+canvasW/10)*(bnX) ) + rX;
		
		for(p=0;p<3;p++){
		
		hMod = canvasW/3*p;
		jitter = random("gaussian")*2;


		makeOval(xC - centremod + jitter, hMod+1,width, canvasW/3-2);

		dir = bnDirArray[dN];


		yT = (bnYV*dir) + random("gaussian");
		xT = random("gaussian")/2;

		run("Translate...", "x=&xT y=&yT  interpolation=None");
		
		}
		
		dN = dN+1;
		
	}

	// Right Noise
	for(i=0; i< bnFV; i++){

		

		width =canvasW/10 + (random*canvasW/10);
		rX = canvasW/10*random()*bnFV;

		xC =  ( ((canvasW/2)-width-rX+canvasW/10)*(bnX) ) + rX;
		
		for(p=0;p<3;p++){
		
		hMod = canvasW/3*p;
		jitter = random("gaussian")*2;

		makeOval(canvasW-xC-width + centremod + jitter, hMod+1,width, canvasW/3-2);

		dir = bnDirArray[dN];
		

		yT = (bnYV*dir) + random("gaussian");
		xT = random("gaussian")/2;

		run("Translate...", "x=&xT y=&yT  interpolation=None");
		
		}

		dN = dN+1;

	}

	}
	
	

	run("Select None");

	run("Gaussian Blur...", "sigma=2");
	
		run("32-bit");
	





//---------------------Countershading Gradient Generation-------------------------

newImage("cs", "32-bit black", canvasW, canvasW, 1);
selectImage("cs");
wait(10);
run("Set...", "value=0");
makeOval(csH-(targetWidth/4*csH2),canvasW/2-(targetHeight/4*csH2),targetWidth/2*csH2,targetHeight/2*csH2);



if(selectionType != -1){

run("Rotate...", "rotate angle=&csR");

csR2 = -csR;

run("Rotate...", "  angle=&csR2 ");

run("Set...", "value=1");

}




	

run("Select None");
run("Gaussian Blur...", "sigma=&csS");





	//Bilateral
	if( TargetChoicePattern == "yes"){


	TITLE=getTitle();


	centremod =  TargetChoiceCentre - canvasW/2;
	centremod = centremod*-1;

	makeRectangle(0, 0,  (canvasW/2) - centremod, canvasW );


	run("Duplicate...", "title=mirror");
	selectImage("mirror");
	run("Select All");
	run("Flip Horizontally", "slice");


	makeRectangle(0, 0,  (canvasW/2) - centremod, canvasW );


	run("Copy");
	setPasteMode("Copy");
	close("mirror");

	selectImage(TITLE);

	makeRectangle((canvasW/2)-centremod, 0, (canvasW/2) - centremod, canvasW );

	run("Paste");


	run("Select All");
	run("Gaussian Blur...", "sigma=1");

	}



imageCalculator("Multiply", "pattern","cs");

selectImage("pattern");




// Threshold


makeOval(targetX,targetY,targetWidth,targetHeight);
roiManager("select", 0);
getStatistics(area, mean, min, max);
nBins = 100000;
getHistogram(values, counts, nBins, min, max);

count = 0;
tVal = 1;
target = area*(1-patT);
for(i=0; i<nBins; i++){
	count += counts[i];
	if(count >= target){
		tVal = values[i];
		i = nBins;
	}
}

tValOld=tVal;
maxOld=max;
setThreshold(tVal, max);
run("Create Selection");
roiManager("Add");




//---------------------Colour Generation-------------------------

newImage("col", "32-bit black", canvasW, canvasW, 3);
run("Select All");

//Background
setSlice(1); // set bottom colours
run("Set...", "value=&bcL");
setSlice(2);
run("Set...", "value=&bcA");
setSlice(3);
run("Set...", "value=&bcB");



	//Bilateral
	if( TargetChoicePattern == "yes"){

	for(i=0;i<3;i++){
	setSlice(i+1);

	TITLE=getTitle();


	centremod =  TargetChoiceCentre - canvasW/2;
	centremod = centremod*-1;

	makeRectangle(0, 0,  (canvasW/2) - centremod, canvasW );


	run("Duplicate...", "title=mirror");
	selectImage("mirror");
	run("Select All");
	run("Flip Horizontally", "slice");


	makeRectangle(0, 0,  (canvasW/2) - centremod, canvasW );


	run("Copy");
	setPasteMode("Copy");
	close("mirror");

	selectImage(TITLE);

	makeRectangle((canvasW/2)-centremod, 0, (canvasW/2) - centremod, canvasW );

	run("Paste");


	run("Select All");
	
	}

	}
	





run("Select None");
run("Gaussian Blur...", "sigma=&tc1S stack");



//Pattern
newImage("pat", "32-bit black", canvasW, canvasW, 3);
run("Select None");
setSlice(1);
run("Set...", "value=&pcL");
setSlice(2);
run("Set...", "value=&pcA");
setSlice(3);
run("Set...", "value=&pcB");


	
roiManager("select", 1);
run("Make Inverse");
run("Set...", "value=0 stack");



imageCalculator("Transparent-zero stack", "col","pat");

close("pat");






setSlice(1);


run("Select All");




roiManager("select",1);
getStatistics(area, macMean1);



run("Make Inverse");
getStatistics(area, bkgMean1);

run("Select None");


// ---------------------- Edge Enhancement---------------------------
//=========================================================================

R=random();
getStatistics(area,mean,min,max,dev);

if(dev>0.1){








eeW=0;
eeV=0;

/*


*/



eeGB=ee_S;
eePB=ee_E;
eeIB=ee_I;
eeWB=ee_V;
eeVB=ee_H;

eeGR=ee_SR;
eePR=ee_ER;
eeIR=ee_IR;



for(EE=0;EE<2;EE++){


if(EE==0){

GR=1;
PR=1;
IR=1;

if(eeGR<0.5) GR=1-pow(1-eeGR*2,2);
if(eePR<0.5) PR=1-pow(1-eePR*2,2);
if(eeIR<0.5) IR=1-pow(1-eeIR*2,2);

}

if(EE==1){

GR=1;
PR=1;
IR=1;

if(eeGR>0.5) GR=(1-pow((eeGR-0.5)*2,2));
if(eePR>0.5) PR=(1-pow((eePR-0.5)*2,2));
if(eeIR>0.5) IR=(1-pow((eeIR-0.5)*2,2));
}



eeG=2+pow(eeGB,3)*GR*20;
eeP=eePB*PR;
eeG=eeG-eeP*eeG*0.8;
eeI=pow(eeIB*IR,1.5)*40;
eeI=eeI+eeI*(1-eeP);


eeW=-1+eeWB*2;
eeV=-1+eeVB*2;

eeW=pow(abs(eeW),1)*(3+eeG);
eeV=pow(abs(eeV),1)*(3+eeG);



selectImage("col");




//EE revised
//....................

run("Duplicate...", " ");
rename("EE");


setPasteMode("Copy");
//Blur
run("Gaussian Blur...", "sigma=&eeG"); 

//Bilateral
if( TargetChoicePattern == "yes"){

//Stretch Horizontal

w2= 400+eeW*2;
run("Scale...", "x=- y=- width=&w2 height=400 interpolation=Bilinear average create");

run("Copy"); 
close();
run("Paste");

} else{

//Translate Horizontal
run("Translate...", "x=&eeW y=0 interpolation=None");

if(eeW>0) makeRectangle(eeW,0,400-eeW,400);
if(eeW<0) makeRectangle(0,0,400+eeW,400);

}


//Translate Vertical
run("Duplicate...", " ");

run("Translate...", "x=0 y=&eeV interpolation=None");


if(eeV>0) makeRectangle(0,eeV,400,400-eeV);
if(eeV<0) makeRectangle(0,0,400,400+eeV);

run("Copy");
close();
run("Paste");
run("Select None");

selectImage("col");
run("Copy"); setPasteMode("Subtract");
selectImage("EE");
run("Paste");

run("Multiply...","value=-1");
dev=getValue("StdDev");

if(dev>0.001){

if(EE==0) run("Min...","value=0");
if(EE==1) run("Max...","value=0");

run("Abs");

max=getValue("Max");
run("Divide...","value=max");
setThreshold(0.0001,1); run("Create Selection");
run("Macro...", "code=v=v/(abs(v)*"+eeP+"+"+1-eeP+");");
run("Select None");

max=getValue("Max");
run("Divide...","value=max");


if(EE==1) run("Multiply...","value=-1");


run("Multiply...","value=&eeI ");

}
rename("EE_"+EE);
}

selectImage("EE_"+0);
run("Copy"); setPasteMode("Add"); 
close();
selectImage("col"); run("Paste");
selectImage("EE_"+1);
run("Copy"); setPasteMode("Add"); 
close();
selectImage("col"); run("Paste");




selectImage("col");


setSlice(1);
run("Select All");

}


/*
roiManager("select",1);
getStatistics(area, macMean2);
macDif = macMean1-macMean2;
run("Add...","value=macDif");



run("Make Inverse");
getStatistics(area, bkgMean2);
bkgDif = bkgMean1-bkgMean2;
run("Add...","value=bkgDif");
*/

run("Select None");


// ---------------------- Random Speckling 1 ---------------------------
//=========================================================================


	SpecklingSheet1 = getDirectory("plugins") + "2 CamoReq//Patterns/speckle1.tif";

	if(!isOpen("speckleSheet1")){
	open(SpecklingSheet1);
	rename("speckleSheet1");
	}


	selectImage("speckleSheet1");
	
	run("Select All");
	

	if( TargetChoicePattern == "yes"){

	TITLE=getTitle();
	makeRectangle((600-canvasW)/2, noiP1, (canvasW/2) - centremod, canvasW  );
	run("Duplicate...", "title=mirror");
	run("Flip Horizontally", "slice");
	makeRectangle(0, 0, (canvasW/2) - centremod, canvasW  );
	run("Copy");
	setPasteMode("Copy");
	close("mirror");
	selectImage(TITLE);
	makeRectangle(((600-canvasW)/2)+(canvasW/2)-centremod,  noiP1, (canvasW/2) - centremod, canvasW );
	run("Paste");
	run("Add Specified Noise...", "standard=noiF");
	run("Make Inverse");
	run("Add Specified Noise...", "standard=noiF");


	}
	run("Select None");
	

eL=noiS1;
eL=1+eL * (4 *(1-pow(noiS1,0.5)));
blr=pow(noiS1,2)*20;


m= getValue("Mean");
run("Subtract...","value=m");
run("Gaussian Blur...", "sigma=&blr");

mx1=getValue("Max");
mx2=abs(getValue("Min"));

if(mx1>mx2)run("Divide...","value=mx1");
if(mx2>mx1)run("Divide...","value=mx2");



mx=getValue("Max");
setThreshold(0.0001,mx); run("Create Selection");
run("Macro...", "code=v=v/abs(v)*pow(abs(v),"+eL+")");");
mn=getValue("Min");
setThreshold(mn,-0.0001); run("Create Selection");
run("Macro...", "code=v=v/abs(v)*pow(abs(v),"+eL+")");");




run("Select None");
//run("Gaussian Blur...", "sigma=1");

	getStatistics(area, mean, min, max, SD);


	if(mean > 0)
		mStr =  "code=v=(((v/" + d2s(SD,12) + ")-" + d2s(mean,12) + ")*" + d2s(noiL1,12) + ")+1";
	else {
		mean *= -1;
		mStr =  "code=v=(((v/" + d2s(SD,12) + ")+" + d2s(mean,12) + ")*" + d2s(noiL1,12) + ")+1";
	}

	run("Macro...", mStr);
	run("Select None");
	
	
	
		makeRectangle((600-canvasW)/2, noiP1, canvasW, canvasW  );
		


run("Copy"); setPasteMode("Multiply");
close();

selectImage("col");
run("Paste");

// ---------------------- Random Speckling 2 ---------------------------
//=========================================================================


	SpecklingSheet2 = getDirectory("plugins") + "2 CamoReq//Patterns/speckle1.tif";

	if(!isOpen("speckleSheet2")){
	open(SpecklingSheet1);
	rename("speckleSheet2");
	}


	

	if( TargetChoicePattern == "yes"){
	TITLE=getTitle();
	makeRectangle((600-canvasW)/2, noiP1, (canvasW/2) - centremod, canvasW  );
	run("Duplicate...", "title=mirror");
	run("Flip Horizontally", "slice");
	makeRectangle(0, 0, (canvasW/2) - centremod, canvasW  );
	run("Copy");
	setPasteMode("Copy");
	close("mirror");
	selectImage(TITLE);
	makeRectangle(((600-canvasW)/2)+(canvasW/2)-centremod,  noiP1, (canvasW/2) - centremod, canvasW );
	run("Paste");
	run("Add Specified Noise...", "standard=noiF");
	run("Make Inverse");
	run("Add Specified Noise...", "standard=noiF");
	}
	run("Select None");

eL=noiS2;
eL=1+eL * (4 *(1-pow(noiS2,0.5)));
blr=pow(noiS2,2)*20;

m= getValue("Mean");
run("Subtract...","value=m");

run("Gaussian Blur...", "sigma=&blr");

mx1=getValue("Max");
mx2=abs(getValue("Min"));

if(mx1>mx2)run("Divide...","value=mx1");
if(mx2>mx1)run("Divide...","value=mx2");



mx=getValue("Max");
setThreshold(0.0001,mx); run("Create Selection");
run("Macro...", "code=v=v/abs(v)*pow(abs(v),"+eL+")");");
mn=getValue("Min");
setThreshold(mn,-0.0001); run("Create Selection");
run("Macro...", "code=v=v/abs(v)*pow(abs(v),"+eL+")");");

run("Copy"); 
setPasteMode("Subtract");

run("Select None");
run("Gaussian Blur...", "sigma=1");
run("Paste"); 
run("Multiply...","value=-2");
setPasteMode("Add");
run("Paste");


	getStatistics(area, mean, min, max, SD);


	if(mean > 0)
		mStr =  "code=v=(((v/" + d2s(SD,12) + ")-" + d2s(mean,12) + ")*" + d2s(noiL2,12) + ")+1";
	else {
		mean *= -1;
		mStr =  "code=v=(((v/" + d2s(SD,12) + ")+" + d2s(mean,12) + ")*" + d2s(noiL2,12) + ")+1";
	}

	run("Macro...", mStr);
	run("Select None");

		makeRectangle((600-canvasW)/2, noiP1, canvasW, canvasW  );
run("Copy"); setPasteMode("Multiply");
close();

selectImage("col");
run("Paste");












setSlice(1);




run("Select All");


run("CIELAB 32Bit to RGB24 smooth"); // create RGB colour from CIELAB


run("Min...", "value=1");

run("Add Specified Noise...", "standard=1");

//run("Spherical Deform"); // wrap around sphere






rename(Var0[j]);

run("Set... ", "zoom=50 x=200 y=200");

selectImage(Var0[j]);

run("Invert");


//Mask with Target Shape
//----------------------------
run("Select All");


selectImage(Var0[j]);
run("Copy");
rename("sheet");
close("sheet");

selectImage("Target");
run("RGB Color");
setPasteMode("Subtract");
run("Paste");
rename(Var0[j]);

selectImage(Var0[j]);
roiManager("deselect");


//Details
//----------------------------
if(isOpen("Detail")){
	selectImage(Var0[j]);
	run("RGB Stack");
	selectImage("Detail_Alpha");
	
	run("Copy");
	setPasteMode("Multiply");
	selectImage(Var0[j]);

	setSlice(1);
	run("Paste");
	setSlice(2);
	run("Paste");
	setSlice(3);
	run("Paste");
	
	
	setPasteMode("Add");
	
	selectImage("Detail");
	setSlice(1);
	run("Copy");
	selectImage(Var0[j]);
	setSlice(1);
	run("Paste");
	
	selectImage("Detail");
	setSlice(2);
	run("Copy");
	selectImage(Var0[j]);
	setSlice(2);
	run("Paste");	
	
	selectImage("Detail");
	setSlice(3);
	run("Copy");
	selectImage(Var0[j]);
	setSlice(3);
	run("Paste");	
	
	run("RGB Color");	
}




//Shading
//----------------------------
if(isOpen("Shader")){
	run("RGB Stack");
	run("32-bit");
	
	
	setPasteMode("Multiply");
	
	
	for(i=0;i<3;i++){
	selectImage("Shader");
	setSlice(i+1);
	run("Copy");
	selectImage(Var0[j]);
	setSlice(i+1);
	run("Paste");
	}

	
	run("8-bit");
	run("RGB Color");
	
	
	
}



//Gloss
//----------------------------
if(isOpen("Gloss")){
selectImage("Gloss");
setPasteMode("Add");
run("Copy");
selectImage(Var0[j]);
run("Paste");
}


//Outline
//----------------------------
if(isOpen("Outline")){

run("Min...", "value=10");
selectWindow("Outline");
run("Select All");
run("Copy");
selectImage(Var0[j]);
setPasteMode("Transparent-white");
run("Paste");
}





//Clear up uneeded images.

if(isOpen("col")) close("col");


if(isOpen("dark_random")){
close("dark_random");
}

if(isOpen("light_random")){
close("light_random");
}

if(isOpen("texture_random")){
close("texture_random");
}


if(isOpen("ee"))close("ee");
	
if(isOpen("cs")) close("cs");

if(isOpen("pattern")) close("pattern");

if(isOpen("base pattern")) close("base pattern");




if(isOpen("Output")){
selectImage("Output");
close("Output");

}


}// j nResults


close("patternSheet");


while(roiManager("count") > 0){
	roiManager("select", 0);
	roiManager("Delete");
}

if(isOpen("Outline")){
close("Outline");
}

if(isOpen("Detail")){
close("Detail");
}

if(isOpen("Detail_Alpha")){
close("Detail_Alpha");
}


if(isOpen("Shader")){
close("Shader");
}


if(isOpen("speckleSheet1"))close("speckleSheet1");
if(isOpen("speckleSheet2"))close("speckleSheet2");



